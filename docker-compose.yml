networks:
  cda-networks:
    driver: bridge

services:
  frontend-service:
     build: ./frontend
     container_name : frontend-service
     restart : always
     ports:
       - "4000:4000"
     networks:
       - cda-networks
     volumes:
       - ./frontend:/app
     environment: 
          VITE_PROJECT_SERVICE_URL: ${VITE_PROJECT_SERVICE_URL}
          VITE_AUTH_SERVICE_URL: ${VITE_AUTH_SERVICE_URL}
          VITE_CHAT_SERVICE_URL: ${VITE_CHAT_SERVICE_URL}
          VITE_PROJECT_USER_POST_SERVICE_URL: ${VITE_PROJECT_USER_POST_SERVICE_URL}
     healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  
          
  auth-service:
    build: ./services/auth-service
    container_name: auth-service
    environment:
      MONGODB_URI : ${MONGODB_URI}
    ports: 
      - "3000:3000"
    networks:
      - cda-networks
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  
  project-service:
    build: ./services/project-service
    container_name: project-service
    environment:
      DB_PORT: ${DB_PORT}
      DB_TYPE: ${DB_TYPE}
      DB_HOST: ${DB_HOST}
      DB_DATABASE_PROJECT: ${DB_DATABASE_PROJECT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MONGODB_URI : ${MONGODB_URI}
      JWT_SECRET: ${JWT_SECRET}
    ports: 
      - "3002:3002"
    networks:
      - cda-networks
    depends_on:
      mysql:
         condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  chat-service:
    build: ./services/chat-service
    container_name: chat-service
    environment:
      DB_PORT: ${DB_PORT}
      DB_TYPE: ${DB_TYPE}
      DB_HOST: ${DB_HOST}
      DB_DATABASE_CHAT: ${DB_DATABASE_CHAT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MONGODB_URI : ${MONGODB_URI}
      JWT_SECRET: ${JWT_SECRET}
    ports: 
      - "3001:3001"
    networks:
      - cda-networks
    depends_on:
       mysql:
         condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s


  project_user_post-service:
    build: ./services/project-user-post-service
    container_name: project_user_post-service
    environment:
      DB_PORT: ${DB_PORT}
      DB_TYPE: ${DB_TYPE}
      DB_HOST: ${DB_HOST}
      DB_DATABASE_RELATION: ${DB_DATABASE_RELATION}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MONGODB_URI : ${MONGODB_URI}
      JWT_SECRET: ${JWT_SECRET}
    ports: 
      - "3003:3003"
    networks:
      - cda-networks
    depends_on:
       mysql:
         condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  
  mysql:
    image: mysql:latest
    container_name: mysql-service
    restart: always
    environment:
       MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - cda-networks
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
volumes:
  mysql_data:
