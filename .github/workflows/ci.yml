name: CI - Docker Compose Tests

on: 
  push:
    branches:
      - main
      - dev

env:
  VITE_PROJECT_SERVICE_URL: ${{ secrets.VITE_PROJECT_SERVICE_URL }}
  VITE_AUTH_SERVICE_URL: ${{secrets.VITE_AUTH_SERVICE_URL}}
  VITE_CHAT_SERVICE_URL: ${{ secrets.VITE_CHAT_SERVICE_URL }}
  VITE_PROJECT_USER_POST_SERVICE_URL: ${{ secrets.VITE_PROJECT_USER_POST_SERVICE_URL }}
  ME_CONFIG_MONGODB_ADMINUSERNAME: admin
  ME_CONFIG_MONGODB_ADMINPASSWORD: password
  MONGO_INITDB_ROOT_USERNAME: root
  MONGO_INITDB_ROOT_PASSWORD: password
  DB_TYPE: mysql
  DB_HOST: mysql
  DB_PORT: 3306
  DB_DATABASE_CHAT: chatdb
  DB_DATABASE_PROJECT: projectdb
  MYSQL_USER: user
  MYSQL_PASSWORD: password
  DB_DATABASE_RELATION: relationdb
  ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongo-service:27017/
  JWT_SECRET: my_secret
  MYSQL_ADMIN_PASSWORD: password
  MYSQL_ADMIN_USER: admin
  PORT: "80"
  NODE_ENV: production
  DOCKER_TARGET: production

jobs:
  test-services:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Créer le fichier .env
        run: |
          echo "VITE_PROJECT_SERVICE_URL=${{ env.VITE_PROJECT_SERVICE_URL }}" >> .env
          echo "VITE_AUTH_SERVICE_URL=${{ env.VITE_AUTH_SERVICE_URL }}" >> .env
          echo "VITE_CHAT_SERVICE_URL=${{ env.VITE_CHAT_SERVICE_URL }}" >> .env
          echo "VITE_PROJECT_USER_POST_SERVICE_URL=${{ env.VITE_PROJECT_USER_POST_SERVICE_URL }}" >> .env
          echo "DB_TYPE=${{ env.DB_TYPE }}" >> .env
          echo "DB_HOST=${{ env.DB_HOST }}" >> .env
          echo "DB_PORT=${{ env.DB_PORT }}" >> .env
          echo "DB_DATABASE_CHAT=${{ env.DB_DATABASE_CHAT }}" >> .env
          echo "DB_DATABASE_PROJECT=${{ env.DB_DATABASE_PROJECT }}" >> .env
          echo "MYSQL_USER=${{ env.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }}" >> .env
          echo "DB_DATABASE_RELATION=${{ env.DB_DATABASE_RELATION }}" >> .env
          echo "ME_CONFIG_MONGODB_URL=${{ env.ME_CONFIG_MONGODB_URL }}" >> .env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> .env
          echo "MYSQL_ADMIN_PASSWORD=${{ env.MYSQL_ADMIN_PASSWORD }}" >> .env
          echo "MYSQL_ADMIN_USER=${{ env.MYSQL_ADMIN_USER }}" >> .env
          echo "PORT=80" >> .env
          echo "NODE_ENV=${{ env.NODE_ENV }}" >> .env
          echo "DOCKER_TARGET=${{ env.DOCKER_TARGET }}" >> .env
          echo "MONGO_INITDB_ROOT_USERNAME=${{ env.MONGO_INITDB_ROOT_USERNAME }}" >> .env
          echo "MONGO_INITDB_ROOT_PASSWORD=${{ env.MONGO_INITDB_ROOT_PASSWORD }}" >> .env
          echo "ME_CONFIG_MONGODB_ADMINUSERNAME=${{ env.ME_CONFIG_MONGODB_ADMINUSERNAME }}" >> .env
          echo "ME_CONFIG_MONGODB_ADMINPASSWORD=${{ env.ME_CONFIG_MONGODB_ADMINPASSWORD }}" >> .env

      - name: Start all services
        run: docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          until curl -s http://localhost:3001 > /dev/null; do echo "Waiting for chat-service..."; sleep 5; done
          until curl -s http://localhost:3002 > /dev/null; do echo "Waiting for project-service..."; sleep 5; done
          until curl -s http://localhost:3000 > /dev/null; do echo "Waiting for auth-service..."; sleep 5; done
          until curl -s http://localhost:3003 > /dev/null; do echo "Waiting for project-user-post-service..."; sleep 5; done
          until curl -s http://localhost:4000 > /dev/null; do echo "Waiting for frontend-service..."; sleep 5; done
          echo "All services are up!"

      - name: Install MongoDB Shell
        run: |
           curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server.gpg
           echo "deb [ signed-by=/usr/share/keyrings/mongodb-server.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
           sudo apt-get update
           sudo apt-get install -y mongodb-mongosh
       
      - name: Wait for MongoDB to be ready
        run: |
             for i in {1..10}; do
               mongosh "${{env.ME_CONFIG_MONGODB_URL}}" --eval "db.adminCommand('ping')" && break
               echo "Waiting for MongoDB"
               sleep 5
             done

      - name: Vérifier l’installation de vitest
        run: |
          cd frontend
          npm install

      - name: Run tests for Auth service
        uses: adambirds/docker-compose-action@v1.5.0
        with:
          compose-file: "docker-compose.yml"
          test-container: "auth-service"
          test-command: "npm run test:e2e"

      - name: Run tests for Project service
        uses: adambirds/docker-compose-action@v1.5.0
        with:
            compose-file: "docker-compose.yml"
            test-container: "project-service"
            test-command: "npm run test:e2e"

      - name: Run tests for Chat service
        uses: adambirds/docker-compose-action@v1.5.0
        with:
          compose-file: "docker-compose.yml"
          test-container: "chat-service"
          test-command: "npm run test:e2e"

      - name: Run tests for project-user-post service
        uses: adambirds/docker-compose-action@v1.5.0
        with:
            compose-file: "docker-compose.yml"
            test-container: "project-user-post-service"
            test-command: "npm run test:e2e"

      - name: Stop services
        run: docker compose down