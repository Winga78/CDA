name: Deploy to Amazon ECS

on:
  push:
    branches:
      - env
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
     AWS_REGION: eu-west-3  
     ECS_AUTH_SERVICE0: auth-0_ECS_Service_prod
     ECS_AUTH_SERVICE1: auth-1_ECS_Service_prod
     ECS_AUTH_SERVICE2: auth-2_ECS_Service_prod

     ECS_CHAT_SERVICE0: chat-0_ECS_Service_prod
     ECS_CHAT_SERVICE1: chat-1_ECS_Service_prod

     ECS_PROJECT_SERVICE: project-0_ECS_Service_prod
     ECS_PROJECT_USER_POST_SERVICE0: project-user-post-0_ECS_Service_prod
     ECS_PROJECT_USER_POST_SERVICE1: project-user-post-1_ECS_Service_prod
     ECS_PROJECT_USER_POST_SERVICE2: project-user-post-2_ECS_Service_prod
     
     ECS_FRONTEND_SERVICE: frontend-0_ECS_Service_prod
     ECS_CLUSTER: cda-cluster
     ECR_FRONTEND_REPOSITORY: frontend-repo
     ECR_PROJECT_REPOSITORY: project-repo
     ECR_PROJECT_POST_USER_REPOSITORY: project-user-post-repo
     ECR_AUTH_REPOSITORY: auth-repo
     ECR_CHAT_REPOSITORY: chat-repo
     IMAGE_TAG: ${{ github.sha }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

    
      - name: Wait for MySQL to be ready
        run: |
         until mysqladmin ping -h"${{ secrets.DB_HOST }}" -u"${{ secrets.MYSQL_USER }}" -p"${{ secrets.MYSQL_PASSWORD }}" --silent; do
         echo "Waiting for MySQL..."
         sleep 2
         done

      - name: Install MongoDB Shell
        run: |
           curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server.gpg
           echo "deb [ signed-by=/usr/share/keyrings/mongodb-server.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
           sudo apt-get update
           sudo apt-get install -y mongodb-mongosh
       
      - name: Wait for MongoDB to be ready
        run: |
             for i in {1..10}; do
               mongosh "${{secrets.MONGODB_URI}}" --eval "db.adminCommand('ping')" && break
               echo "Waiting for MongoDB..."
               sleep 5
             done

        # ****se connecter Ã  aws***
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

     # ****lancer les scripts terraform***
      - name: Terraform Deploy
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init, Validate, Plan, and Apply
        working-directory: terraform
        env:
          TF_VAR_MONGODB_URI: ${{ secrets.MONGODB_URI }}
          TF_VAR_NODE_ENV: ${{ secrets.NODE_ENV }}
          TF_VAR_MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          TF_VAR_MYSQL_USER: ${{ secrets.MYSQL_USER }}
          TF_VAR_DB_DATABASE_CHAT: ${{ secrets.DB_DATABASE_CHAT }}
          TF_VAR_DB_DATABASE_PROJECT: ${{ secrets.DB_DATABASE_PROJECT }}
          TF_VAR_DB_DATABASE_RELATION: ${{ secrets.DB_DATABASE_RELATION }}
          TF_VAR_DB_PORT: ${{ secrets.DB_PORT }}
          TF_VAR_DB_TYPE: ${{ secrets.DB_TYPE }}
          TF_VAR_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TF_VAR_PORT: ${{ secrets.PORT }}
          TF_VAR_MYSQL_ADMIN_PASSWORD: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
          TF_VAR_MYSQL_ADMIN_USER: ${{ secrets.MYSQL_ADMIN_USER }}
          TF_VAR_DB_HOST: ${{ secrets.DB_HOST }}
          TF_VAR_hash: ${{ env.IMAGE_TAG }}
        run: |
         terraform init
         terraform validate
         terraform plan
         terraform apply -auto-approve
   
    # ****constuire auth-service***

      - name: Build and push auth image
        id: build-auth
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${{ env.ECR_AUTH_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -t $IMAGE_URI ./services/auth-service
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy updated auth task definition
        run: |
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_AUTH_SERVICE0 }} \
              --force-new-deployment

            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_AUTH_SERVICE1 }} \
              --force-new-deployment

            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_AUTH_SERVICE2 }} \
              --force-new-deployment  
            
    # ****constuire chat-service***

      - name: Build and push chat image
        id: build-chat
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
            IMAGE_URI=${ECR_REGISTRY}/${{ env.ECR_CHAT_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker build -t $IMAGE_URI ./services/chat-service
            docker push $IMAGE_URI
            echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy updated chat task definition
        run: |
              aws ecs update-service \
                --cluster ${{ env.ECS_CLUSTER }} \
                --service ${{ env.ECS_CHAT_SERVICE0 }} \
                --force-new-deployment

              aws ecs update-service \
                --cluster ${{ env.ECS_CLUSTER }} \
                --service ${{ env.ECS_CHAT_SERVICE1 }} \
                --force-new-deployment
          
  
      # ****constuire project-service***

      - name: Build and push project image
        id: build-project
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
              IMAGE_URI=${ECR_REGISTRY}/${{ env.ECR_PROJECT_REPOSITORY }}:${{ env.IMAGE_TAG }}
              docker build -t $IMAGE_URI ./services/project-service
              docker push $IMAGE_URI
              echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy updated project task definition
        run: |
              aws ecs update-service \
                      --cluster ${{ env.ECS_CLUSTER }} \
                      --service ${{ env.ECS_PROJECT_SERVICE }} \
                      --force-new-deployment


      # ****constuire project-user-post-service***

      - name: Build and push project-user-post image
        id: build-project-user-post
        env:
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
                IMAGE_URI=${ECR_REGISTRY}/${{ env.ECR_PROJECT_POST_USER_REPOSITORY }}:${{ env.IMAGE_TAG }}
                docker build -t $IMAGE_URI ./services/project-user-post-service
                docker push $IMAGE_URI
                echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy updated project-user-post task definition
        run: |
             aws ecs update-service \
             --cluster ${{ env.ECS_CLUSTER }} \
             --service ${{ env.ECS_PROJECT_USER_POST_SERVICE0 }} \
             --force-new-deployment

             aws ecs update-service \
             --cluster ${{ env.ECS_CLUSTER }} \
             --service ${{ env.ECS_PROJECT_USER_POST_SERVICE1 }} \
             --force-new-deployment

             aws ecs update-service \
             --cluster ${{ env.ECS_CLUSTER }} \
             --service ${{ env.ECS_PROJECT_USER_POST_SERVICE2 }} \
             --force-new-deployment
      
         # ****constuire frontend-service***
                
      - name: Build and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
                  IMAGE_URI=${ECR_REGISTRY}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ env.IMAGE_TAG }}
                  docker build -t $IMAGE_URI --target production ./frontend
                  docker push $IMAGE_URI
                  echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy updated frontend task definition
        run: |
                       aws ecs update-service \
                       --cluster ${{ env.ECS_CLUSTER }} \
                       --service ${{ env.ECS_FRONTEND_SERVICE }} \
                       --force-new-deployment
