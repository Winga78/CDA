name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-3  
  # ECS_AUTH_SERVICE: auth_task-service
  # ECS_CHAT_SERVICE: chat_task-service 
  # ECS_PROJECT_SERVICE: project_task-service 
  # ECS_PROJECT_USER_POST_SERVICE: project_user_post_task-service 
  # ECS_FRONTEND_SERVICE: frontend_task-service 

  # ECS_CLUSTER: my-cda-ecs-cluster

  # ECS_TASK_AUTH_DEFINITION: auth_task
  # ECS_TASK_CHAT_DEFINITION: chat_task
  # ECS_TASK_PROJECT_DEFINITION: project_task
  # ECS_TASK_PROJECT_USER_POST_TASK_DEFINITION: project_user_post_task
  # ECS_TASK_FRONTEND_DEFINITION: frontend_task                               
  CONTAINER_PROJECT: project-service  
  CONTAINER_CHAT: chat-service
  CONTAINER_PROJECT_USER_POST: project_user_post-service
  CONTAINER_FRONTEND: frontend-service
  CONTAINER_AUTH: auth-service

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag Docker image
        env: 
          ECR_FRONTEND_REPOSITORY: frontend-repo
          ECR_PROJECT_REPOSITORY: project-repo
          ECR_PROJECT_POST_USER_REPOSITORY: project-user-post-repo
          ECR_AUTH_REPOSITORY: auth-repo
          ECR_CHAT_REPOSITORY: chat-repo
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

        run: |
         declare -A REPO_MAP=(
           [auth]=$ECR_AUTH_REPOSITORY
           [project]=$ECR_PROJECT_REPOSITORY
           [chat]=$ECR_CHAT_REPOSITORY
           [project-user-post]=$ECR_PROJECT_POST_USER_REPOSITORY
         )

          build_and_push() {
            REPOSITORY_NAME=$1
            SERVICE_PATH=$2
            docker build -f $SERVICE_PATH/Dockerfile -t $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG $SERVICE_PATH
            docker push $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
          }

           for service in "${!REPO_MAP[@]}"; do
            REPOSITORY_NAME="${REPO_MAP[$service]}"
            build_and_push $REPOSITORY_NAME ./services/$service-service
          done

            build_and_push $ECR_FRONTEND_REPOSITORY ./frontend